import SwiftUI
    
//app algorithm 

//parameter constants and variables
let Min_Age = 18
let Max_Age = 99

//global age var
struct ageVar {
    static var Var : Int = 0
}

class AgeScale {
    //Age variables
    var UserAgeSelect = Int()
    var Acc_Age = Int()
    
    init(UserAgeSelect: Int, Acc_Age: Int){
        self.UserAgeSelect = UserAgeSelect
        self.Acc_Age = Acc_Age
        
        if (Acc_Age == UserAgeSelect){
            ageVar.Var = 100
            
        }
        else if (Acc_Age > UserAgeSelect){
            let Qw = (Acc_Age - UserAgeSelect)
            ageVar.Var = (100 - Qw)
            
        }
        else if (Acc_Age < UserAgeSelect){
            let Qw_2 = (UserAgeSelect - Acc_Age)
            ageVar.Var = (100 - Qw_2)
        }
    }
}

let ageGet = AgeScale(UserAgeSelect: 20, Acc_Age: 20)

//global height var
struct heightVar {
    static var Var : Int = 0
}

class heightScale {
    //height variables
    var UseheightSel = Int()
    var Acc_H = Int()
    
    init(UseheightSel: Int, Acc_H: Int){
        self.UseheightSel = UseheightSel
        self.Acc_H = Acc_H
        
        if (Acc_H == UseheightSel){
            heightVar.Var = 100
            print("The height you selected is \(UseheightSel) cm; Their height is \(Acc_H) cm; Selection is \(heightVar.Var). ")
        }
        else if (Acc_H > UseheightSel){
            let Q = (Acc_H - UseheightSel)
            heightVar.Var = (100 - Q)
            print("The height you selected is \(UseheightSel) cm; Their height is \(Acc_H) cm; Selection is \(heightVar.Var). ")
        }
        else if (Acc_H < UseheightSel){
            let Q_2 = (UseheightSel - Acc_H)
            heightVar.Var = (100 - Q_2)
            print("The height you selected is \(UseheightSel) cm; Their height is \(Acc_H) cm; Selection is \(heightVar.Var). ")
            
        }
    }
}
let heightGet = heightScale(UseheightSel: 180, Acc_H: 160)

//global weight var
struct weightVar {
    static var Var : Int = 0
}
    
class weightScale {
    //weight variables
    var UseWeightSel = Int()
    var Acc_W = Int()

    init(UseWeightSel: Int, Acc_W: Int){
        self.UseWeightSel = UseWeightSel
        self.Acc_W = Acc_W
        
        if (Acc_W == UseWeightSel){
            weightVar.Var = 100
            print("The weight you selected is \(UseWeightSel) kg; Their weight is \(Acc_W) kg; Selection is \(weightVar.Var). ")
        }
        else if (Acc_W > UseWeightSel){
            let W = (Acc_W - UseWeightSel)
             weightVar.Var = (100 - W)
            print("The weight you selected is \(UseWeightSel) kg; Their weight is \(Acc_W) kg; Selection is \(weightVar.Var). ")
        }
        else if (Acc_W < UseWeightSel){
            let W_2 = (UseWeightSel - Acc_W)
             weightVar.Var = (100 - W_2)
            print("The weight you selected is \(UseWeightSel) kg; Their weight is \(Acc_W) kg; Selection is \(weightVar.Var). ")
            
            
        }
    }
    
}
let weightGet = weightScale(UseWeightSel: 80, Acc_W: 60)

//To Do 
//Allow variables to communicate outside classes
//Build MBTI Class 



//zodiac bs
class zodiacScale {
    //variables
    var userZodiac = String()
    var accZodiac = String()
    //global zodiac var
    struct zodiacVar {
        static var Var : Int = 0
    }
        //zodiac combo variables
    
    
    init(userZodiac: String, accZodiac: String){
        self.userZodiac = userZodiac
        self.accZodiac = accZodiac
        
        //dictonary 
        var zodiacLabel = [0:"Aquarius", 1:"Pisces", 2:"Aries", 3:"Taurus", 4:"Gemini", 5:"Cancer", 6:"Leo", 7:"Virgo", 8:"Libra", 9:"Scorpio", 10:"Sagittarius", 11:"Capricorn"]
        
        //dictonary access
        var labelZodiac  = Array(zodiacLabel.values)
        print("Values: ", labelZodiac)
        
        //array
        var zodiacValues:[Int] = [74,38,68,11,85,31,89,30,68,30,83,37,38,73,29,88,10,72,14,86,29,81,50,70,68,29,75,63,74,47,83,42,62,48,87,38,11,88,63,86,23,91,29,73,33,89,31,89,85,10,74,23,83,21,82,40,78,18,92,15,31,72,47,91,21,85,29,77,28,79,27,84,89,14,83,29,82,29,78,35,78,29,75,27,30,86,42,73,40,77,35,65,30,76,32,77,68,29,62,33,78,28,78,30,68,29,71,34,30,81,48,89,18,79,29,76,29,66,30,64,83,50,87,31,92,27,75,32,71,30,74,38,37,70,38,89,15,84,27,77,34,64,38,62]
        
       
        if userZodiac == zodiacLabel[0] && accZodiac == zodiacLabel[0]{
            let zodiacVar.Var = zodiacValues[0] 
        }
        
        
        
        }
    }
